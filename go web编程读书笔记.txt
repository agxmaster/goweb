共10章
第一章 go与web
{
  1、go提供了很多过程式编程语言的特性，也提供了函数式编程方面的特性。
  2、大规模可扩展的 Web 应用通常需要具备以下特质：
  · 可扩展；
      有两种方式可以对性能进行扩展：
        · 一种是垂直扩展，即提升单台设备的 CPU 数量或者性能；go的协程拥有很好的表现
        · 另一种则是水平扩展，即通过增加计算机的数量来提升性能 。
  · 模块化；
      go的所有类型都实现了空接口，用户只需要创建出一个接受空接口作为参数的函数，就可以把任何类型的值用作该函数的实际参数
  · 可维护；
  · 高性能 。
      协程
      
  3、一个 Web 服务器就是一个 Web 应用，即提供接口，又可被人类访问
  4、HTTP 是一种无状态、由文本构成的请求，响应（ request-response ）协议，这种协议使用的是客户端－服务器（ client-server ）计算模型 。
  5、通用网关接口（ Common Gateway Interface, CGI ）
    Web 服务器上调用可执行命令行程序的规范，语序web服务器进程调用外部的进程，通过CGI 与服务器进行对接的程序通常被称为 CGI 程序
  6、服务器端包含（ server-side includes, SSI ）技术
      HTML 文件里面包含一些指令（ directive ），这一模式衍生出了 PHP 、 ASP 、 JSP 和 ColdFusion 等一系列非常成功的引擎 
  7、安全的请求方法
    HTTP 方法只要求服务器提供信息而不会对服务器的状态做任何修改，那么这个方法就是安全的
      GET 、 HEAD 、 OPTIONS 和 TRACE
  8、幕等的请求方法
    HTTP 方法在使用相同的数据进行第二次调用的时候，不会对服务器的状态造成任何改变，
    那么这个方法就是采等的（ idempotent ）
    PUT 和 DELETE
  9、因为重复的 POST 请求是否会改变服务器状态是由服务器自身决定的，所以 POST 方法既不安全也非幕等 。
  
  10、 XHR 是一系列浏览器 API
    ajax
  11、web应用分为处理器和模板引擎两部分
    处理器：
      处理器除了要接收和处理客户端发来的请求，还需要调用模板引擎，然后由模板引擎生成 HTML 并把数据填充至将要回传给客户端的响应报文当中 。
    
      用 MVC 模式来讲，处理器既是控制器（ controller ），也是模型（ model ）。 
      在理想的 MVC实现中，控制器应该只包含路由代码以及 HTTP 报文的解包和打包逻辑 ；
      而模型则应该是“丰满的”，它应该包含应用的逻辑以及数据 
      
      出于对模型的优化，开发者有时候会使用服务对象( service object ）或者函数（ function ）对模型进行操作 。

    模板引擎：
      模板引擎是经由早期的 SSI 技术演变而来的
      静态模板
        夹杂着占位符的HTML，CTemplate 和 Mustache 都属于静态模板引擎
      动态模板
        除了包含 HTML 和占位符之外，还包含一些编程语言结构
        JavaServer Pages ( JSP ), Active Server Pages ( ASP ）和 Embedded Ruby ( ERB )都属于动态模板引擎。 
        PHP 刚诞生的时候看上去也像是一种动态模板，它是之后才逐渐演变成一门编程语言的。
        
  12、一个简单的web服务
  //ResponseWriter 接口   ,指向 Request 结构的指针
  func handler(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w, "hello,%s", r.URL.Path[1:])
  }
  func main() {
    http.HandleFunc("/", handler)
    http.ListenAndServe(":8080", nil)
  }
}

第二章 写一个论坛
{
  多路复用器（ multiplexer ）
  package main

  import (
    "fmt"
    "net/http"
  )

  func index(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w, "hello:%s", r.URL.Path[1:])
  }
  func main() {

    mux := http.NewServeMux()
    files := http.FileServer(http.Dir("public"))
    mux.Handle("/static/", http.StripPrefix("/static/", files))
    mux.HandleFunc("/index", index)
    server := &http.Server{
      Addr:    ":8080",
      Handler: mux,
    }
    server.ListenAndServe()
  }
 
 
 http://127.0.0.1:8080/index/dasdsa/dasdsa
 http://127.0.0.1:8080/static/1.txt   public与该可执行文件同级
}

对 Go 语言来说，隐藏在框架之下的通常是 net/http 和 html/template 这两个标准库，

第一个参数是一个 ResponseWriter 接口，而第二个参数则是一个指向 Reques t 结构的指针
第三章 接受请求
{
• Client 、 Response 、 Header 、 Request 和 Cookie 对客户端进行支持；
• Server 、 ServeMux 、 Handler/HandleFunc 、 ResponseWriter 、 Header 、 Request和 Cookie 则对服务器进行支持。

net /http 标准库还提供了一个连接多路复用器( multiplexer）的接口以及一个默认的多路复用器        

1、创建服务器：
  调用 ListenAndServe传入网络地址以及负责处理请求的处理器（ handler ）作为参数就可以了 。 如果网络地址参数为空字符串， 那么服务器默认使用 80 端口进行网络连接；
  如果处理器参数为 nil ，那么服务器将使用默认的多路复用器 DefaultServeMux 。
  
  http.ListenAndServe("",nil)

2、Server结构对服务器进行详细配置  
  type Server struct {
    Addr string
    Handler Handler
    ReadTimeout time.Durati on
    WriteTimeout time.Duration
    MaxHeaderBytes int
    TLSConfig *tls.Config
    TLSNextProt.map(string)func(*Server, *tls.Conn, Handler)
    ConnState func(net . Conn , ConnState)
    ErrorLog *log.Logger
  }    

 server:=http.Server{
   Addr:":8080",
   Handler:nil,
 }
 server.ListenAndServe()

3、https的访问
server:=http.Server{
   Addr:":8080",
   Handler:nil,
}
server.ListenAndServeTLS("cert.pem","key.pem")   //SSL证书 和服务器私钥
  
4、crypto包生成服务器证书
SSL/TLS：安全套接字层，后改名为TLS传输层安全协议  
HTTPS:需要SSL/TLS证书实现数据加密和身份验证
SSL证书存储在服务器上，使用X.509格式进行格式化数据

流程：
  服务器接收到客户端请求后将证书和响应一并发给客户端；
  客户端在确认证书真实性后生产一个随机秘钥，并用证书的公钥进行加密；
  对随机密钥加密生成的对称密钥就是客户端服务器通信时，对通信加密的实际密钥。

5、处理器
为服务器编写处理器  
  
一个处理器就是一个拥有 ServeHTTP 方法的接口 
任何接口只要拥有如下签名的 ServeHTTP 方法 ServeHTTP(http.ResponseWriter, *http.Request)  ，那么它就是一个处理器。

/*
https://127.0.0.1:8080/das    =>    hello:das
*/
type Myhandler struct{}

func (m *Myhandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "hello:%s", r.URL.Path[1:])
}
func main() {
	my := Myhandler{}
	server := &http.Server{
		Addr:    ":8080",
		Handler: &my,
	}

	server.ListenAndServeTLS("cert.pem", "key.pem")
}

DefaultServeMux 既是 ServeMux 结构的实例，也是 Handler 结构的实例，所有他也可以作为一个处理器。
  
6、多个处理器
http.Handle实际上是 ServeMux 结构的方法
调用 http. Handle实际上就是在调用 DefaultServeMux 的 Handle 方法 。  
  
7、处理器函数 （创建处理器的一种便利方法）
处理器函数实际上就是与处理器拥有相同行为的函数，这些函数与 Se rveHTTP 方法拥有相同的签名 
处理器函数的实现原理是这样的： 
Go拥有一种 HandlerFunc 函数类型,它可以把一个带有正确签名的函数f转换成一个带有方法f的Handler。   
func hello(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "hello Myhandler1:%s", r.URL.Path[1:])
} 
执行 HandlerFunc 就可以把方法转换成处理器：
  helloHandler := HandlerFunc(hello)
  
另外HandleFune 函数会将 hello 函数转换成一个 Handler ，并将它与 DefaultServeMux 进行绑定，以此来简化创建并绑定 Handler 的工作。 


串联处理器和处理器函数是一种非常常见的惯用法，很多 Web 应用框架都使用了这一技术 。
8、串联多个处理器函数
尽管 Go 语言并不是一 门函数式编程语言，但它也拥有一些函数式编程语言的特性，
如函数类型、匿名函数和闭包 。正用在此处。 
  诸如日志记录、安全检查和错误处理这样的操作通常被称为横切关注点
  使用串联（ chaining ）技术分隔代码中的横切关注点，这种做法有时候也称为管道处理

func log(h http.HandlerFunc) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		...
		h(w, r)
	}
} 
http.HandleFunc("/hello", log(hello))  
  
8、串联多个处理器

func log(h http.Handler) http.Handler {
	return http.HandlerFunc(
    func(w http.ResponseWriter, r *http.Request) {
      ...
      h.ServeHTTP(w, r)
    }
  )
} 
func protect(h http.Handler) http.Handler {
	return http.HandlerFunc(
    func(w http.ResponseWriter, r *http.Request) {
      ...
      h.ServeHTTP(w, r)
    }
  )
} 
http.Handle("/hello", protect(log(hello)))  
  


9、ServeMux和DefaultServeMux
  ServeMux 是一个 HTTP请求多路复用器，是个结构不是个接口，所有DefaultServerMux是ServerMux的实例
  ServeMux 结构包含了一个映射，这个映射会将 URL 映射至相应的处理器 。 
  当 ServeMux 的ServeHTTP 方法接收到一个请求的时候，它会在结构的映射里面找出与被请求 URL 最为匹配的URL ，然后调用与之相对应的处理器的 ServeHTTP 方法。
  
  因为 ServeMux 也是一个处理器，所以用户也可以在有需要的情况下对其实例实施处理器串联。
  
  果被绑定的 URL 不是以／结尾，那么它只会与完全相同的 URL 匹配；
  但如果被绑定的 URL 以／结尾，那么 即使请求的 URL 只有前缀部分与被绑定 URL 相同，ServeMux 也会认定这两个 URL 是匹配的 。
  最小意外原则：
     /hello/there 会匹配/hello/而不会匹配/hello  ,找不到就会匹配/。 
     
     
  因为创建一个处理器和多路复用器唯一需要做的就是实现 ServeHTTP 方法，所以通过自行创建多路复用器来代替 net/http 包中的 ServeMux 是完全可行的
  很多第三方的多路复用器可供使用，
  ServeMux 的一个缺陷是无法使用变量实现 URL 模式匹配
  
  高效的轻量级第三方多路复用器－HttpRouter
  https://github.com/julienschmidt/httprouter

10、http2  
go get golang.org/x/net/http2

http2.ConfiqureServer(&server ，&http2. Server{})
  
}


第四章 处理请求
{
 1、request结构
Request 结构主要由以下部分组成：
  • URL 宇段；
  • Header 字段；
  • Body 字段；
  • Form 字段、 PostForm 字段和 MultipartForm 字段。

http://www.example.com/post?id=123&thread_id=456
2、URL
r.URL.RawQuery => id=l23&thread_id=456
Header 类型拥有 4 种基本方法，这些方法可以根据给定的键执行添加 、 删除、获取和设置值等操作 
	fmt.Fprintf(w, "HELLO:%s\n", r.URL.Path[1:])
	fmt.Fprintf(w, "header1:%s\n", r.Header["Accept"])     //切片
	fmt.Fprintf(w, "header2:%s\n", r.Header.Get("Accept")) //以,分割的字符串
	lens := r.ContentLength
	body := make([]byte, lens)
	r.Body.Read(body)
	fmt.Fprintf(w, "body:%s\n", string(body))


3、Form字段
使用 Request 结构的方法获取表单数据的一般步骤是：
1 调用 ParseForm 方法或者 ParseMultipartForm 方法，对请求进行语法分析。
2 根据步骤 l 调用的方法，访问相应的 Form 字段、 PostForm 字段或 MultipartForm字段。

PostForm 字段只支持 application/x-www- form-urlencoded编码
	r.ParseForm()
	fmt.Fprintf(w, "form:%s\n", r.Form)
	fmt.Fprintf(w, "form:%s\n", r.PostForm)
要通过 MultipartForm 宇段来获取 multipart/form-data 编码的表单数据
	r.ParseMultipartForm(1024)
	fmt.Fprintln(w, r.MultipartForm)
ForrnValue会自动调用上面的方法
  fmt.Fprintln(w, r.FormValue("c"))
	fmt.Fprintln(w, r.PostFormValue("c"))
	fmt.Fprintln(w, r.Form)     //在FormValue或PostFormValue后调用也可以获取值
	fmt.Fprintln(w, r.PostForm) //在FormValue或PostFormValue后调用也可以获取值

4、文件
  func file(w http.ResponseWriter, r *http.Request) {
    r.ParseMultipartForm(1024)
    fileHeader := r.MultipartForm.File["uploaded"][0]
    file, err := fileHeader.Open()
    if err == nil {
      data, err := ioutil.ReadAll(file)
      if err == nil {
        fmt.Fprintln(w, string(data))
      }
    }
  }
  或
  // FormFile 方法将同时返回文件和文件头作为结果。 用户在使用 FormFile 方法时，将不再需要手动调用 ParseMultipartForm 方法，只需要对返回的文件进行处理即可。
  func file(w http.ResponseWriter, r *http.Request) {
    file, _, err := r.FormFile("uploaded")
    if err == nil {
      data, err := ioutil.ReadAll(file)
      if err == nil {
        fmt.Fprintln(w, string(data))
      }
    }
  }
5、json
  使用 ParseForm 方法是无法从 Angul缸客户端发送的 POST 请求中获取JSON 数据的，但使用 jQuery 这样的 JavaScript 库却不会出现这样的问题。因为jQuery会将数据编码成application/x-www-form-urlencoded，而Angular 在编码 POST 请求时使用的却是 appli cation/json
  Go 语言的 ParseForm 方法只会对表单数据进行语法分析，它并不接受 application/json

6、ResponseWriter接口
  ResponseWriter 是一个接口，处理器可以通过这个接口创建 HTTP 响应。 
  ResponseWriter在创建响应时会用到 http.response结构，因为该结构是一个非导出（ nonexported ） 的结构，所以用户只能通过 ResponseWriter 来使用这个结构，而不能直接使用它。

  虽然 ResponseWriter看上去像是一个值，但它实际上却是一个带有结构指针的接口
  ResponseWriter 接口拥有以下 3 个方法：
  • Write;
  • WriteHeader;
  • Header 。取得一个由首部组成的映射，修改这个映射就可以修改首部
  
 WriteHeader 方法它并不能用于设置响应的首部（ Header方法才是做这件事的） ： 
 WriteHeader 方法用来设置状态码；
 WriteHeader 方法在返回错误状态码时特别有用：如果你定义了一个 API ，但是尚未为其编写具体的实现，那么当客户端访问这个 API 的时候，你可能会希望这个 API 返回一个 501NotImplemented ，状态码
 
 Header取得一个由首部组成的映射，修改这个映射就可以修改首部
 
str := `
<html>
  <head>
    <title>hello bb</title>
  </head>
  <body>
    <h1>woqu</h1>
  </body>
</html>
`
w.Write([]byte(str))  


w.WriteHeader(501)
fmt.Fprintln(w, "no such service!")

//因为 WriteHeader 方法在执行完毕之后就不允许再对首部进行写入了，所以用户必须先写入 Location 首部，然后再写入状态码。
w.Header().Set("Location", "http://www.baidu.com")
w.WriteHeader(302)

7、ResponseWriter返回json数据
	w.Header().Set("Content-Type", "application/json")
	post := &Post{
		User:    "wz",
		Threads: []string{"aaa", "bbb", "ccc"},
	}
	jsons, _ := json.Marshal(post)
	w.Write(jsons)
	w.WriteHeader(201)


8、cookie
type Cookie struct {
  Name string
  Value string
  Pa th string
  Domain string
  Expires time.Time//指定 cookie 应该在什么时候过期，
  RawExpires string
  MaxAge  int//指明cookie 在被浏览器创建出来之后能够存活多少秒
  Secure bool
  HttpOnly bool
  Raw string
  Unparsed []string
}
没有设置 Expires 字段的 cookie 通常称为会话 cookie 或者临时 cookie ，这种 cookie 在浏览器关闭的时候就会自动被移除 。 
设置了 Expires 字段的 cookie 通常称为持久 cookie,这种 cookie 会一直存在，直到指定的过期时间来临或者被手动删除为止。

http1.1 推荐使用 MaxAge 来代替 Expires 
微软的 IE 6 、 IE 7 和 IE 8 都不支持 MaxAge
为了兼容性，一般同时使用 Expires 和MaxAge 。
	// w.Header().Set("Set-cookie", c1.String())
	// w.Header().Add("Set-cookie", c2.String())
	//或者使用快捷方法
	http.SetCookie(w, &c1)
	http.SetCookie(w, &c2)

	h := r.Header["Cookie"] //切片
	fmt.Fprintln(w, h)
	//或者使用快捷方法获取单个和多个cookie
	c11, err := r.Cookie("cookie1wz") //字符串
	if err != nil {
		fmt.Fprintln(w, "can not find cookie cookie1wz")
	}
	cs := r.Cookies() //切片
	fmt.Fprintln(w, c11)
	fmt.Fprintln(w, cs)

9、利用cookie实现闪现消息
默认不出现的消息，但满足条件后就会出现，但是刷新后又消失的消息，成为闪现消息
最常用的方法是把这些消息存储在页面刷新时就会被移除的会话 cookie 里面  

尝试获取指定的 cookie ，如果没有找到该 cookie ，它就会把变量 err 设置成 http.ErrNoCookie ； 如果找到了这个 cookie ，那么它必须完成以下两个操作：
1 创建一个同名的 cookie ，将它的 MaxAge 设置为负数，并且将 Expires 值也设置成一个已经过去的时间；
2 使用 SetCookie 方法将刚刚创建的同名 cookie 发送至客户端。
初看上去，这两个操作的目的似乎是要替换已经存在的 cookie ，但实际上，因为新 cookie的 MaxAge 值为负数，并且 Expires 值也是一个已经过去的时间，所以这样做实际上就是要完全地移除这个 cookie。 

//Base64URL 编码，以此来满足响应首部对 cookie值的 URL 编码要求
func showMessage(w http.ResponseWriter, r *http.Request) {

	c, err := r.Cookie("flash") //字符串
	if err != nil {
		if err == http.ErrNoCookie {
			fmt.Fprintln(w, "no message")
		}
	} else {
		rc := http.Cookie{
			Name:    "flash",
			MaxAge:  -1,
			Expires: time.Unix(1, 0),
		}
		http.SetCookie(w, &rc)
		val, _ := base64.URLEncoding.DecodeString(c.Value)
		fmt.Fprintln(w, string(val))
	}
}
func setMessage(w http.ResponseWriter, r *http.Request) {
	msg := []byte("hello msg")
	c1 := http.Cookie{
		Name:  "flash",
		Value: base64.URLEncoding.EncodeToString(msg),
	}
	http.SetCookie(w, &c1)
}


}

第五章 内容展示
{
  Go 语言的模板库 text/template 和 html/template
  Web 模板引擎演变自 SSI （服务器端包含）技术，并最终衍生出了诸如 PHP 、ColdFusion 和 JSP 这样的 Web 编程语言
  
1、无逻辑模板引擎 （ logic-less template engine ）一一将模板中指定的占位符替换成相应的动态数据。 
这种模板引擎只进行字符串替换，而不执行任何逻辑处理。 无逻辑模板引擎的目的是完全分离程序的表现和逻辑，并将所有计算方面的工作都交给处理器完成。

2、嵌入逻辑的模板引擎 （ embedded logic template engine )将编程语言代码嵌入模板当中，并在模板引擎渲染模板时，由模板引擎执行这些代码并进行相应的字符串替换工作 。 
因为拥有在模板里面嵌入逻辑的能力，所以这类模板引擎能够变得非常强大，但与此同时，这种能力也会导致逻辑分散遍布在不同的处理器之间，使代码变得难以维护。


Go 标准库提供的模板引擎功能大部分都定义在了 text/template 库当中，而小部分与 HTML 相关的功能则定义在了 html/template 库里面 。 
这两个库相辅相成：用户可以把这个模板引擎当做无逻辑模板引擎使用，但与此同时， Go 也提供了足够多的嵌入式模板引擎特性，使这个模板引擎用起来既有趣又强大。

通用模板引擎库 text/template ，它可以处理任意格式的文本，
专门为 HTML 格式而设的模板引擎库 html/template 
模板中的动作默认使用两个大括号{{xx}}包围


使用 Go 的 Web 模板引擎需要以下两个步骤 ：
1 对文本格式的模板源进行语法分析，
  创建一个经过语法分析的模板结构，其中模板源、既可以是一个字符串，也可以是模板文件中包含的内容；
  
  在向 ParseFiles 传人单个文件时， ParseFiles返回的是一个模板；而在向 ParseFi l es 传入多个文件时， ParseFiles 返回的则是一个模板集合
  
  如果目录里面只有 tmpl.html 一个 HTML 文件，那么语句
  t,_: = template.ParseFiles(”tmpl.html”)
  和语句
  t,_: = t emplate.ParseGlob (” * .html”)
  将产生相同的效果 。
  
   Go 也提供了另外一种机制，专门用于处理分析模板时出现的错误 ：
    t : = template.Must(template.ParseFiles(”t mpl.html”))
  
2 执行经过语法分析的模板，
  将 ResponseWriter 和模板所需的动态数据传递给模板引擎，被调用的模板引擎会把经过语法分析的模板和传入的数据结合起来，生成出最终的 HTML,并将这些 HTML传递给 ResponseWriter 。
  
3、动作
本节将讨沦以下几种主要的动作：
  · 条件动作；
      {{if arg }}//比如arg需要被传入，则写成.
      some content
      {{ else}}
      othe r content
      {{ end }}
  · 迭代动作；
      {{ range . }}
      <li>{{ . }}/li>
      {{ end}}
  · 设置动作；
      {{.}}//这里用传入的值
      {{ with "aa" }}//这之间的.都是由aa代替
      <li>{{ . }}/li>
      {{ end}}
    
  · 包含动作 。
     {{template "v.html" }}//嵌入另一个模板
     
4、参数
  .就是一个参数
5、变量
  {{ range $k,$v:=. }}
  <li>{{ $k }}-{{$v}}/li>
  {{ end}}
6、管道 格式化
  {{12.3|fmt.Fprintf "%.2f"}}
7、函数
  为管道提供的函数，可以自定义函数使用
8、上下文感知

9、预防XSS攻击
上下文感知功能不仅能够自动对 HTML 进行转义，它还能够防止基于 JavaScript 、 cs s 甚至URL 的 xss 攻击。
t , : = template. Parse Files (” tmpl . html ” )
t .Execute(w , r.FormValue (” comment”))

10、不对html进行转义
t ’ 一：＝ template.ParseFiles (” tmpl.html ”)
t.Execute (w, template.HTML(r . FormValue (” comment”)))

11、模板嵌套  定义模板
{{define "content"}}
hello world
{{end}}

{{define "layout"}}
  {{template "content"}}
{{end}}


t , _ := template.ParseFiles (” layout.html”)
t.ExecuteTemplate(w, "layout", "")

12、通过块动作定义默认模板
如果模板引擎没有找到可用的 content 模板，那么它就会使用块动作中定义的conten t 模板 。
{{block "content" .}}
  xxx
{{end}}


  
}

第六章 存储数据
{
1、内存存储
var PostByid map[int]*Post
2、文件存储 csv
3、文件存储 god   二进制数据文件

4、数据库存储
  
}

第七章 go web服务
{
   WEB服务架构 
  每个WEB服务都有自己的一套接口，被WEB服务描述语言WSDL描述，
  其他服务需要根据web服务的描述使用SOAP消息与web服务交互
  
  企业级系统多使用基于SOAP的web服务  笨重复杂安全  功能驱动  RPC风格的  xml
  对外公开可访问的web服务基于rest    灵活高效简单  数据驱动  HTTP动作  json
  
  1、REST
    具象状态传输，是一种设计理念
    通过http标准动作操纵资源，并以此来进行相互交流
    面向对象范型通过创建对象的模型来表示事物，定义方法附着在模型上
    REST则是进化版，以资源的名义把模型暴露出来，通过http动作操纵这些资源。
  
    每次调用post都会有一项资源被创建
    每次调用put都会替换一项已经存在的资源
    不太常见的patch是对资源进行部分更新
    
    用户激活的方法：
      1、过程具体化，或者吧动作转换成名词然后将其用作资源
        POST /user/456/activation HTTP/1.1
      2、将动作用作资源的属性
        PATCH /user/456 HTTP/1.1
        { ” active ” : ” true”}
  2、XML
     Go 语言使用双引号（””）和反引号（、）来包围字符串，使用单引号（’）来包围 rune
     解析xml的结构字段必须全部首字母大写公开，名字也必须首字母大写公开
     处理解析小的xml到结构中的规则：  Unmarshal
      1、获取根节点： 定义一个类型为xml.Name的XMLName字段存储根节点
      2、获取节点属性： 定义一个和元素属性同名的字段，如获取id：
        定义Id类型string，`xml:"id,attr"`包围，则id的值就保存在了Id中
      3、存储当前xml元素的字符数据：
        获取当前字段的内容，`xml:",chardata"`
      4、获取xml元素原始数据：
        任意名字的字段，`xml:",innerxml"`
      5、子元素：
        `xml:"a>b>c"`
     
     以流的方式解析xml  Decoder
        但是xml解析的结构不变

  3、json
  
}

第八章 应用测试
{
最主要的是 testing 包  
net/http/httptest 包是另一个与 Web 应用编程有关的库，这个库是基于 testing 库实现的  

0、testing
  一般测试文件的名字和被测试文件的名字相对于，且以_test.go结尾
  测试文件和被测试文件必须放在同一个包内
  测试函数内部Error Fail等方法用来表示测试失败
  
  程序员在进行测试驱动开发（ test-driven development,TDD ）的时候，通常会让测试用例持续地失败，直到函数被真正地实现出来为止；
1、testing 单元测试 (检验程序功能性)
  func TestXxx(t *testing.T){...}

  为验证单元的正确性而设置的自动化测试，
  用例要做的就是向单元传人数据，然后检查单元产生的输出是否符合预期 。
  通常以测试套件（ test suite ）的形式运行，后者是为了验证特定行为而创建的单元测试用例集合 
  Go 的单元测试会按照功能分组，并放置在 以 test . go 为后缀的文件当中 
  
  testing .T 结构拥有几个非常有用的函数：
  • Log--将给定的文本记录到错误日志里面 ，与 fmt.Println 类似；
  • Logf--根据给定的格式，将给定的文本记录到错误日志里面，与 frnt.Printf 类似 ；
  • Fail--将测试函数标记为“已失败”，但允许测试函数继续执行；
  • FailNow --测试函数标记为 “已失败”并停止执行测试函数。
  
  • Error -- 将会先后调用 Log 函数和 Fail 函数
  • Errorf --将会先后调用 Logf 函数和 Fail 函数
  • Fatal --将会先后调用 Log 函数和 FailNow 函数
  • Fatalf --将会先后调用 Logf 函数和 FailNow 函数
  
  -v 来获得更详细的信息，并通过覆盖率标志 -cover 来获知测试用例对代码的覆盖率：
  
  -short来跳过指定testing.Short()的用例，不指定-short则该用例还会执行

1.2、并行测试提升速度
  t.Parallel()
  
  可以加上 -parallel 3

2、testing 基准测试 (查明任务单元性能)
  func BencharkXxx(b *testing.B)

func BenchmarkDecode(b *testing.B) {
	for i := 0; i < b.N; i++ {
		decode("post.json")
	}
}

//.表示当前目录下的所有基准测试文件运行
//且即运行了功能测试，也
go test -v -cover -short -bench .   
  
//只运行基准测试
go test -run x -bench .

BenchmarkDecode 100000  19577 ns/op 
ok  xxx 1.9s 
//执行 100000 次，每次执行需要19577ns=0.019577ms 
//100000 * 19577ns = 1957700000ns = 1.9s

3、http测试
 对 Go Web 应用的单元测试可以通过 testing／httptest 包来完成。 
 这个包提供了模拟一个 Web 服务器所需的设施，
 用户可以利用 net/http 包中的客户端函数向这个服务器发送 HTTP请求，然后获取模拟服务器返回的 HTTP 响应 。
 
4、测试替身
自动单元测试环境经常会使用这种技术
实现测试替身的一种设计方法是使用依赖注入的设计模式

 
}

第九章 应用并发
{
  goroutine 并不是线程，它只是对线程的多路复用 。
  goroutine 被阻塞时，它也会阻塞所复用的操作系统线程，而运行时环境（ runtime ）则会把位于被阻塞线程上的其他 goroutine 移动到其他未阻塞的线程上继续运行。
  
  Go 语言在 sync 包中提供了一种名为等待组（ WaitGroup ）的机制
  
  select是随机进入case中的
  channels读取时第二个参数是当前通道的状态，true/flase
  
  
  
  
}

第十章 应用部署
{
  将应用部署到docker
  Docker 就是在容器中构建、发布和运行应用的一个开放平台。
  
  Docker 守护进程管理docker容器
  Docker 容器（简称容器）是对运行特定应用所需的全部程序（ 包括操作系统在内）的一种轻量级虚拟化。
  容器都基于 Docker 镜像构建，后者是辅助容器进行启动的只读模板，所有容器都需要通过镜像启动。 
  Docker 镜像既可以以本地形式存储在运行着 Docker 守护进程的机器上，也可以被托管至名为 Docker 注册中心的 Docker 镜像资源库里面 。 


  
}

其他
{
  
}



